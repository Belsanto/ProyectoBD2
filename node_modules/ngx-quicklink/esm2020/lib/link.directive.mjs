import { Directive, Optional, Inject, Input } from '@angular/core';
import { LinkHandler } from './link-handler.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
export class LinkDirective {
    constructor(linkHandlers, el, link, linkWithHref) {
        this.linkHandlers = linkHandlers;
        this.el = el;
        this.linkHandler = this.linkHandlers.filter(h => h.supported()).shift();
        this.rl = link || linkWithHref;
        if (this.element && this.element.setAttribute) {
            this.element.setAttribute('ngx-ql', '');
        }
    }
    ngOnChanges(c) {
        if (c['routerLink'] && this.linkHandler) {
            this.linkHandler.unregister(this);
            this.linkHandler.register(this);
        }
    }
    ngOnDestroy() {
        if (!this.linkHandler) {
            return;
        }
        this.linkHandler.unregister(this);
    }
    get element() {
        return this.el.nativeElement;
    }
    get urlTree() {
        return this.rl.urlTree;
    }
}
LinkDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: LinkDirective, deps: [{ token: LinkHandler }, { token: i0.ElementRef }, { token: i1.RouterLink, optional: true }, { token: i1.RouterLinkWithHref, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
LinkDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.0.4", type: LinkDirective, selector: "[routerLink]", inputs: { routerLink: "routerLink" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: LinkDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[routerLink]'
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [LinkHandler]
                }] }, { type: i0.ElementRef }, { type: i1.RouterLink, decorators: [{
                    type: Optional
                }] }, { type: i1.RouterLinkWithHref, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { routerLink: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluay5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtcXVpY2tsaW5rL3NyYy9saWIvbGluay5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFFVCxRQUFRLEVBQ1IsTUFBTSxFQUdOLEtBQUssRUFFTixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7OztBQU1yRCxNQUFNLE9BQU8sYUFBYTtJQUt4QixZQUMrQixZQUFtQyxFQUN4RCxFQUFjLEVBQ1YsSUFBZ0IsRUFDaEIsWUFBZ0M7UUFIZixpQkFBWSxHQUFaLFlBQVksQ0FBdUI7UUFDeEQsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUl0QixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDeEUsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLElBQUksWUFBWSxDQUFDO1FBQy9CLElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRTtZQUM3QyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDekM7SUFDSCxDQUFDO0lBRUQsV0FBVyxDQUFDLENBQWdCO1FBQzFCLElBQUksQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDdkMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDakM7SUFDSCxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3JCLE9BQU87U0FDUjtRQUNELElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFRCxJQUFJLE9BQU87UUFDVCxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDO0lBQy9CLENBQUM7SUFFRCxJQUFJLE9BQU87UUFDVCxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDO0lBQ3pCLENBQUM7OzBHQXRDVSxhQUFhLGtCQU1kLFdBQVc7OEZBTlYsYUFBYTsyRkFBYixhQUFhO2tCQUh6QixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxjQUFjO2lCQUN6Qjs7MEJBT0ksTUFBTTsyQkFBQyxXQUFXOzswQkFFbEIsUUFBUTs7MEJBQ1IsUUFBUTs0Q0FSRixVQUFVO3NCQUFsQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBPcHRpb25hbCxcbiAgSW5qZWN0LFxuICBPbkNoYW5nZXMsXG4gIE9uRGVzdHJveSxcbiAgSW5wdXQsXG4gIFNpbXBsZUNoYW5nZXNcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXJMaW5rLCBSb3V0ZXJMaW5rV2l0aEhyZWYgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgTGlua0hhbmRsZXIgfSBmcm9tICcuL2xpbmstaGFuZGxlci5zZXJ2aWNlJztcbmltcG9ydCB7IExpbmtIYW5kbGVyU3RyYXRlZ3kgfSBmcm9tICcuL2xpbmstaGFuZGxlci1zdHJhdGVneSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tyb3V0ZXJMaW5rXSdcbn0pXG5leHBvcnQgY2xhc3MgTGlua0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgQElucHV0KCkgcm91dGVyTGluazogUGljazxSb3V0ZXJMaW5rIHwgUm91dGVyTGlua1dpdGhIcmVmLCAncm91dGVyTGluayc+Wydyb3V0ZXJMaW5rJ107XG4gIHByaXZhdGUgcmw6IFJvdXRlckxpbmsgfCBSb3V0ZXJMaW5rV2l0aEhyZWY7XG4gIHByaXZhdGUgbGlua0hhbmRsZXI6IExpbmtIYW5kbGVyU3RyYXRlZ3kgfCB1bmRlZmluZWQ7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChMaW5rSGFuZGxlcikgcHJpdmF0ZSBsaW5rSGFuZGxlcnM6IExpbmtIYW5kbGVyU3RyYXRlZ3lbXSxcbiAgICBwcml2YXRlIGVsOiBFbGVtZW50UmVmLFxuICAgIEBPcHRpb25hbCgpIGxpbms6IFJvdXRlckxpbmssXG4gICAgQE9wdGlvbmFsKCkgbGlua1dpdGhIcmVmOiBSb3V0ZXJMaW5rV2l0aEhyZWZcbiAgKSB7XG4gICAgdGhpcy5saW5rSGFuZGxlciA9IHRoaXMubGlua0hhbmRsZXJzLmZpbHRlcihoID0+IGguc3VwcG9ydGVkKCkpLnNoaWZ0KCk7XG4gICAgdGhpcy5ybCA9IGxpbmsgfHwgbGlua1dpdGhIcmVmO1xuICAgIGlmICh0aGlzLmVsZW1lbnQgJiYgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSkge1xuICAgICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnbmd4LXFsJywgJycpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZiAoY1sncm91dGVyTGluayddICYmIHRoaXMubGlua0hhbmRsZXIpIHtcbiAgICAgIHRoaXMubGlua0hhbmRsZXIudW5yZWdpc3Rlcih0aGlzKTtcbiAgICAgIHRoaXMubGlua0hhbmRsZXIucmVnaXN0ZXIodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgaWYgKCF0aGlzLmxpbmtIYW5kbGVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMubGlua0hhbmRsZXIudW5yZWdpc3Rlcih0aGlzKTtcbiAgfVxuXG4gIGdldCBlbGVtZW50KCk6IEVsZW1lbnQge1xuICAgIHJldHVybiB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cblxuICBnZXQgdXJsVHJlZSgpOiBhbnkge1xuICAgIHJldHVybiB0aGlzLnJsLnVybFRyZWU7XG4gIH1cbn1cbiJdfQ==