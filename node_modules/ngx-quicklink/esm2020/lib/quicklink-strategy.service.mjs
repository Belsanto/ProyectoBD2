import { Injectable } from '@angular/core';
import { PRIMARY_OUTLET } from '@angular/router';
import { EMPTY } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "./prefetch-registry.service";
import * as i2 from "@angular/router";
export class QuicklinkStrategy {
    constructor(registry, router) {
        this.registry = registry;
        this.router = router;
        this.loading = new Set();
    }
    preload(route, load) {
        if (this.loading.has(route)) {
            // Don't preload the same route twice
            return EMPTY;
        }
        const conn = typeof navigator !== 'undefined' ? navigator.connection : undefined;
        if (conn) {
            // Don't preload if the user is on 2G. or if Save-Data is enabled..
            if ((conn.effectiveType || '').includes('2g') || conn.saveData)
                return EMPTY;
        }
        // Prevent from preloading
        if (route.data && route.data['preload'] === false) {
            return EMPTY;
        }
        const fullPath = findPath(this.router.config, route);
        if (this.registry.shouldPrefetch(fullPath)) {
            this.loading.add(route);
            return load();
        }
        return EMPTY;
    }
}
QuicklinkStrategy.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: QuicklinkStrategy, deps: [{ token: i1.PrefetchRegistry }, { token: i2.Router }], target: i0.ɵɵFactoryTarget.Injectable });
QuicklinkStrategy.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: QuicklinkStrategy });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.4", ngImport: i0, type: QuicklinkStrategy, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.PrefetchRegistry }, { type: i2.Router }]; } });
const findPath = (config, route) => {
    config = config.slice();
    const parent = new Map();
    const visited = new Set();
    while (config.length) {
        const el = config.shift();
        if (!el) {
            continue;
        }
        visited.add(el);
        if (el === route)
            break;
        let children = el.children || [];
        const current = el._loadedConfig;
        if (current && current.routes) {
            children = children.concat(current.routes);
        }
        children.forEach((r) => {
            if (visited.has(r))
                return;
            parent.set(r, el);
            config.push(r);
        });
    }
    let path = '';
    let current = route;
    while (current) {
        if (isPrimaryRoute(current)) {
            path = `/${current.path}${path}`;
        }
        else {
            path = `/(${current.outlet}:${current.path}${path})`;
        }
        current = parent.get(current);
    }
    return path.replace(/\/\//, '/');
};
function isPrimaryRoute(route) {
    return route.outlet === PRIMARY_OUTLET || !route.outlet;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVpY2tsaW5rLXN0cmF0ZWd5LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtcXVpY2tsaW5rL3NyYy9saWIvcXVpY2tsaW5rLXN0cmF0ZWd5LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQXFDLGNBQWMsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRXBGLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxNQUFNLENBQUM7Ozs7QUFHN0IsTUFBTSxPQUFPLGlCQUFpQjtJQUc1QixZQUNVLFFBQTBCLEVBQzFCLE1BQWM7UUFEZCxhQUFRLEdBQVIsUUFBUSxDQUFrQjtRQUMxQixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBSnhCLFlBQU8sR0FBRyxJQUFJLEdBQUcsRUFBUyxDQUFDO0lBS3hCLENBQUM7SUFFSixPQUFPLENBQUMsS0FBWSxFQUFFLElBQWM7UUFDbEMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUMzQixxQ0FBcUM7WUFDckMsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUNELE1BQU0sSUFBSSxHQUFHLE9BQU8sU0FBUyxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUUsU0FBaUIsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUMxRixJQUFJLElBQUksRUFBRTtZQUNSLG1FQUFtRTtZQUNuRSxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsSUFBSSxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLFFBQVE7Z0JBQUUsT0FBTyxLQUFLLENBQUM7U0FDOUU7UUFDRCwwQkFBMEI7UUFDMUIsSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssS0FBSyxFQUFFO1lBQ2pELE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFDRCxNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDckQsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUMxQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN4QixPQUFPLElBQUksRUFBRSxDQUFDO1NBQ2Y7UUFFRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7OzhHQTdCVSxpQkFBaUI7a0hBQWpCLGlCQUFpQjsyRkFBakIsaUJBQWlCO2tCQUQ3QixVQUFVOztBQWlDWCxNQUFNLFFBQVEsR0FBRyxDQUFDLE1BQWUsRUFBRSxLQUFZLEVBQVUsRUFBRTtJQUN6RCxNQUFNLEdBQUcsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3hCLE1BQU0sTUFBTSxHQUFHLElBQUksR0FBRyxFQUFnQixDQUFDO0lBQ3ZDLE1BQU0sT0FBTyxHQUFHLElBQUksR0FBRyxFQUFTLENBQUM7SUFDakMsT0FBTyxNQUFNLENBQUMsTUFBTSxFQUFFO1FBQ3BCLE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUMxQixJQUFJLENBQUMsRUFBRSxFQUFFO1lBQ1AsU0FBUztTQUNWO1FBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNoQixJQUFJLEVBQUUsS0FBSyxLQUFLO1lBQUUsTUFBTTtRQUN4QixJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUMsUUFBUSxJQUFJLEVBQUUsQ0FBQztRQUNqQyxNQUFNLE9BQU8sR0FBSSxFQUFVLENBQUMsYUFBYSxDQUFDO1FBQzFDLElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUU7WUFDN0IsUUFBUSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzVDO1FBQ0QsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQVEsRUFBRSxFQUFFO1lBQzVCLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQUUsT0FBTztZQUMzQixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNsQixNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pCLENBQUMsQ0FBQyxDQUFDO0tBQ0o7SUFDRCxJQUFJLElBQUksR0FBRyxFQUFFLENBQUM7SUFDZCxJQUFJLE9BQU8sR0FBc0IsS0FBSyxDQUFDO0lBRXZDLE9BQU8sT0FBTyxFQUFFO1FBQ2QsSUFBSSxjQUFjLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDM0IsSUFBSSxHQUFHLElBQUksT0FBTyxDQUFDLElBQUksR0FBRyxJQUFJLEVBQUUsQ0FBQztTQUNsQzthQUFNO1lBQ0wsSUFBSSxHQUFHLEtBQUssT0FBTyxDQUFDLE1BQU0sSUFBSSxPQUFPLENBQUMsSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDO1NBQ3REO1FBQ0QsT0FBTyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDL0I7SUFFRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ25DLENBQUMsQ0FBQztBQUVGLFNBQVMsY0FBYyxDQUFDLEtBQVk7SUFDbEMsT0FBTyxLQUFLLENBQUMsTUFBTSxLQUFLLGNBQWMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7QUFDMUQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFByZWxvYWRpbmdTdHJhdGVneSwgUm91dGVyLCBSb3V0ZSwgUFJJTUFSWV9PVVRMRVQgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgUHJlZmV0Y2hSZWdpc3RyeSB9IGZyb20gJy4vcHJlZmV0Y2gtcmVnaXN0cnkuc2VydmljZSc7XG5pbXBvcnQgeyBFTVBUWSB9IGZyb20gJ3J4anMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUXVpY2tsaW5rU3RyYXRlZ3kgaW1wbGVtZW50cyBQcmVsb2FkaW5nU3RyYXRlZ3kge1xuICBsb2FkaW5nID0gbmV3IFNldDxSb3V0ZT4oKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlZ2lzdHJ5OiBQcmVmZXRjaFJlZ2lzdHJ5LFxuICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsXG4gICkge31cblxuICBwcmVsb2FkKHJvdXRlOiBSb3V0ZSwgbG9hZDogRnVuY3Rpb24pIHtcbiAgICBpZiAodGhpcy5sb2FkaW5nLmhhcyhyb3V0ZSkpIHtcbiAgICAgIC8vIERvbid0IHByZWxvYWQgdGhlIHNhbWUgcm91dGUgdHdpY2VcbiAgICAgIHJldHVybiBFTVBUWTtcbiAgICB9XG4gICAgY29uc3QgY29ubiA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnID8gKG5hdmlnYXRvciBhcyBhbnkpLmNvbm5lY3Rpb24gOiB1bmRlZmluZWQ7XG4gICAgaWYgKGNvbm4pIHtcbiAgICAgIC8vIERvbid0IHByZWxvYWQgaWYgdGhlIHVzZXIgaXMgb24gMkcuIG9yIGlmIFNhdmUtRGF0YSBpcyBlbmFibGVkLi5cbiAgICAgIGlmICgoY29ubi5lZmZlY3RpdmVUeXBlIHx8ICcnKS5pbmNsdWRlcygnMmcnKSB8fCBjb25uLnNhdmVEYXRhKSByZXR1cm4gRU1QVFk7XG4gICAgfVxuICAgIC8vIFByZXZlbnQgZnJvbSBwcmVsb2FkaW5nXG4gICAgaWYgKHJvdXRlLmRhdGEgJiYgcm91dGUuZGF0YVsncHJlbG9hZCddID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIEVNUFRZO1xuICAgIH1cbiAgICBjb25zdCBmdWxsUGF0aCA9IGZpbmRQYXRoKHRoaXMucm91dGVyLmNvbmZpZywgcm91dGUpO1xuICAgIGlmICh0aGlzLnJlZ2lzdHJ5LnNob3VsZFByZWZldGNoKGZ1bGxQYXRoKSkge1xuICAgICAgdGhpcy5sb2FkaW5nLmFkZChyb3V0ZSk7XG4gICAgICByZXR1cm4gbG9hZCgpO1xuICAgIH1cblxuICAgIHJldHVybiBFTVBUWTtcbiAgfVxufVxuXG5jb25zdCBmaW5kUGF0aCA9IChjb25maWc6IFJvdXRlW10sIHJvdXRlOiBSb3V0ZSk6IHN0cmluZyA9PiB7XG4gIGNvbmZpZyA9IGNvbmZpZy5zbGljZSgpO1xuICBjb25zdCBwYXJlbnQgPSBuZXcgTWFwPFJvdXRlLCBSb3V0ZT4oKTtcbiAgY29uc3QgdmlzaXRlZCA9IG5ldyBTZXQ8Um91dGU+KCk7XG4gIHdoaWxlIChjb25maWcubGVuZ3RoKSB7XG4gICAgY29uc3QgZWwgPSBjb25maWcuc2hpZnQoKTtcbiAgICBpZiAoIWVsKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgdmlzaXRlZC5hZGQoZWwpO1xuICAgIGlmIChlbCA9PT0gcm91dGUpIGJyZWFrO1xuICAgIGxldCBjaGlsZHJlbiA9IGVsLmNoaWxkcmVuIHx8IFtdO1xuICAgIGNvbnN0IGN1cnJlbnQgPSAoZWwgYXMgYW55KS5fbG9hZGVkQ29uZmlnO1xuICAgIGlmIChjdXJyZW50ICYmIGN1cnJlbnQucm91dGVzKSB7XG4gICAgICBjaGlsZHJlbiA9IGNoaWxkcmVuLmNvbmNhdChjdXJyZW50LnJvdXRlcyk7XG4gICAgfVxuICAgIGNoaWxkcmVuLmZvckVhY2goKHI6IFJvdXRlKSA9PiB7XG4gICAgICBpZiAodmlzaXRlZC5oYXMocikpIHJldHVybjtcbiAgICAgIHBhcmVudC5zZXQociwgZWwpO1xuICAgICAgY29uZmlnLnB1c2gocik7XG4gICAgfSk7XG4gIH1cbiAgbGV0IHBhdGggPSAnJztcbiAgbGV0IGN1cnJlbnQ6IFJvdXRlIHwgdW5kZWZpbmVkID0gcm91dGU7XG5cbiAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICBpZiAoaXNQcmltYXJ5Um91dGUoY3VycmVudCkpIHtcbiAgICAgIHBhdGggPSBgLyR7Y3VycmVudC5wYXRofSR7cGF0aH1gO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXRoID0gYC8oJHtjdXJyZW50Lm91dGxldH06JHtjdXJyZW50LnBhdGh9JHtwYXRofSlgO1xuICAgIH1cbiAgICBjdXJyZW50ID0gcGFyZW50LmdldChjdXJyZW50KTtcbiAgfVxuXG4gIHJldHVybiBwYXRoLnJlcGxhY2UoL1xcL1xcLy8sICcvJyk7XG59O1xuXG5mdW5jdGlvbiBpc1ByaW1hcnlSb3V0ZShyb3V0ZTogUm91dGUpIHtcbiAgcmV0dXJuIHJvdXRlLm91dGxldCA9PT0gUFJJTUFSWV9PVVRMRVQgfHwgIXJvdXRlLm91dGxldDtcbn1cbiJdfQ==